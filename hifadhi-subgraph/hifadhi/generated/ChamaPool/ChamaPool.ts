// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class JoinedPool extends ethereum.Event {
  get params(): JoinedPool__Params {
    return new JoinedPool__Params(this);
  }
}

export class JoinedPool__Params {
  _event: JoinedPool;

  constructor(event: JoinedPool) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get maxParticipants(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get contributionPerParticipant(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get durationPerTurn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TurnClaimed extends ethereum.Event {
  get params(): TurnClaimed__Params {
    return new TurnClaimed__Params(this);
  }
}

export class TurnClaimed__Params {
  _event: TurnClaimed;

  constructor(event: TurnClaimed) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get turnId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChamaPool__getAllSavingPoolsResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get userTurnAddress(): Address {
    return this[2].toAddress();
  }

  get contributionPerParticipant(): BigInt {
    return this[3].toBigInt();
  }

  get maxParticipants(): BigInt {
    return this[4].toBigInt();
  }

  get durationPerTurn(): BigInt {
    return this[5].toBigInt();
  }

  get currentTurn(): BigInt {
    return this[6].toBigInt();
  }

  get active(): boolean {
    return this[7].toBoolean();
  }

  get participants(): Array<Address> {
    return this[8].toAddressArray();
  }

  get _poolBalance(): BigInt {
    return this[9].toBigInt();
  }

  get isRestrictedPool(): boolean {
    return this[10].toBoolean();
  }

  get userContibutionNumber(): BigInt {
    return this[11].toBigInt();
  }

  get startTime(): BigInt {
    return this[12].toBigInt();
  }

  get poolID(): BigInt {
    return this[13].toBigInt();
  }
}

export class ChamaPool__getOwnerSavingPoolsResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get name(): string {
    return this[1].toString();
  }

  get userTurnAddress(): Address {
    return this[2].toAddress();
  }

  get contributionPerParticipant(): BigInt {
    return this[3].toBigInt();
  }

  get maxParticipants(): BigInt {
    return this[4].toBigInt();
  }

  get durationPerTurn(): BigInt {
    return this[5].toBigInt();
  }

  get currentTurn(): BigInt {
    return this[6].toBigInt();
  }

  get active(): boolean {
    return this[7].toBoolean();
  }

  get participants(): Array<Address> {
    return this[8].toAddressArray();
  }

  get _poolBalance(): BigInt {
    return this[9].toBigInt();
  }

  get isRestrictedPool(): boolean {
    return this[10].toBoolean();
  }

  get userContibutionNumber(): BigInt {
    return this[11].toBigInt();
  }

  get startTime(): BigInt {
    return this[12].toBigInt();
  }

  get poolID(): BigInt {
    return this[13].toBigInt();
  }
}

export class ChamaPool__getTurnDetailsResultValue0Struct extends ethereum.Tuple {
  get turnBal(): BigInt {
    return this[0].toBigInt();
  }

  get endTime(): BigInt {
    return this[1].toBigInt();
  }

  get currentClaimant(): Address {
    return this[2].toAddress();
  }

  get active(): boolean {
    return this[3].toBoolean();
  }
}

export class ChamaPool__poolsResult {
  value0: Address;
  value1: string;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: BigInt;
  value9: boolean;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: BigInt,
    value9: boolean,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getUserTurnAddress(): Address {
    return this.value2;
  }

  getContributionPerParticipant(): BigInt {
    return this.value3;
  }

  getMaxParticipants(): BigInt {
    return this.value4;
  }

  getDurationPerTurn(): BigInt {
    return this.value5;
  }

  getCurrentTurn(): BigInt {
    return this.value6;
  }

  getActive(): boolean {
    return this.value7;
  }

  get_poolBalance(): BigInt {
    return this.value8;
  }

  getIsRestrictedPool(): boolean {
    return this.value9;
  }

  getUserContibutionNumber(): BigInt {
    return this.value10;
  }

  getStartTime(): BigInt {
    return this.value11;
  }

  getPoolID(): BigInt {
    return this.value12;
  }
}

export class ChamaPool__turnResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getTurnBal(): BigInt {
    return this.value0;
  }

  getEndTime(): BigInt {
    return this.value1;
  }

  getCurrentClaimant(): Address {
    return this.value2;
  }

  getActive(): boolean {
    return this.value3;
  }
}

export class ChamaPool extends ethereum.SmartContract {
  static bind(address: Address): ChamaPool {
    return new ChamaPool("ChamaPool", address);
  }

  balances(param0: BigInt, param1: Address): BigInt {
    let result = super.call("balances", "balances(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balances",
      "balances(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllSavingPools(): Array<ChamaPool__getAllSavingPoolsResultValue0Struct> {
    let result = super.call(
      "getAllSavingPools",
      "getAllSavingPools():((address,string,address,uint256,uint256,uint256,uint256,bool,address[],uint256,bool,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      ChamaPool__getAllSavingPoolsResultValue0Struct
    >();
  }

  try_getAllSavingPools(): ethereum.CallResult<
    Array<ChamaPool__getAllSavingPoolsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllSavingPools",
      "getAllSavingPools():((address,string,address,uint256,uint256,uint256,uint256,bool,address[],uint256,bool,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ChamaPool__getAllSavingPoolsResultValue0Struct>()
    );
  }

  getOwnerSavingPools(
    ownerAddress: Address
  ): Array<ChamaPool__getOwnerSavingPoolsResultValue0Struct> {
    let result = super.call(
      "getOwnerSavingPools",
      "getOwnerSavingPools(address):((address,string,address,uint256,uint256,uint256,uint256,bool,address[],uint256,bool,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );

    return result[0].toTupleArray<
      ChamaPool__getOwnerSavingPoolsResultValue0Struct
    >();
  }

  try_getOwnerSavingPools(
    ownerAddress: Address
  ): ethereum.CallResult<
    Array<ChamaPool__getOwnerSavingPoolsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOwnerSavingPools",
      "getOwnerSavingPools(address):((address,string,address,uint256,uint256,uint256,uint256,bool,address[],uint256,bool,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(ownerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ChamaPool__getOwnerSavingPoolsResultValue0Struct>()
    );
  }

  getTurnDetails(poolId: BigInt): ChamaPool__getTurnDetailsResultValue0Struct {
    let result = super.call(
      "getTurnDetails",
      "getTurnDetails(uint256):((uint256,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return changetype<ChamaPool__getTurnDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTurnDetails(
    poolId: BigInt
  ): ethereum.CallResult<ChamaPool__getTurnDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getTurnDetails",
      "getTurnDetails(uint256):((uint256,uint256,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ChamaPool__getTurnDetailsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  hascontributed(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "hascontributed",
      "hascontributed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_hascontributed(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hascontributed",
      "hascontributed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolContributionbalances(param0: BigInt): BigInt {
    let result = super.call(
      "poolContributionbalances",
      "poolContributionbalances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_poolContributionbalances(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolContributionbalances",
      "poolContributionbalances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolCounter(): BigInt {
    let result = super.call("poolCounter", "poolCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolCounter", "poolCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolbalances(param0: BigInt): BigInt {
    let result = super.call("poolbalances", "poolbalances(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_poolbalances(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolbalances",
      "poolbalances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt): ChamaPool__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(address,string,address,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ChamaPool__poolsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBigInt(),
      result[9].toBoolean(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt()
    );
  }

  try_pools(param0: BigInt): ethereum.CallResult<ChamaPool__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(address,string,address,uint256,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChamaPool__poolsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBigInt(),
        value[9].toBoolean(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt()
      )
    );
  }

  totalNumberOfTurnsPerpool(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "totalNumberOfTurnsPerpool",
      "totalNumberOfTurnsPerpool(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalNumberOfTurnsPerpool(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalNumberOfTurnsPerpool",
      "totalNumberOfTurnsPerpool(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  turn(param0: BigInt): ChamaPool__turnResult {
    let result = super.call(
      "turn",
      "turn(uint256):(uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ChamaPool__turnResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBoolean()
    );
  }

  try_turn(param0: BigInt): ethereum.CallResult<ChamaPool__turnResult> {
    let result = super.tryCall(
      "turn",
      "turn(uint256):(uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChamaPool__turnResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _mgmt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimTurnCall extends ethereum.Call {
  get inputs(): ClaimTurnCall__Inputs {
    return new ClaimTurnCall__Inputs(this);
  }

  get outputs(): ClaimTurnCall__Outputs {
    return new ClaimTurnCall__Outputs(this);
  }
}

export class ClaimTurnCall__Inputs {
  _call: ClaimTurnCall;

  constructor(call: ClaimTurnCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimTurnCall__Outputs {
  _call: ClaimTurnCall;

  constructor(call: ClaimTurnCall) {
    this._call = call;
  }
}

export class ContributeToPoolCall extends ethereum.Call {
  get inputs(): ContributeToPoolCall__Inputs {
    return new ContributeToPoolCall__Inputs(this);
  }

  get outputs(): ContributeToPoolCall__Outputs {
    return new ContributeToPoolCall__Outputs(this);
  }
}

export class ContributeToPoolCall__Inputs {
  _call: ContributeToPoolCall;

  constructor(call: ContributeToPoolCall) {
    this._call = call;
  }

  get _poolID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ContributeToPoolCall__Outputs {
  _call: ContributeToPoolCall;

  constructor(call: ContributeToPoolCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get maxParticipants(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get contributionPerParticipant(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get durationPerTurn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isRestricted(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}
